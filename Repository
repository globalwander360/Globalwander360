@Override
public List<String> getPropertyNamesByEventIdAndType(
        String bnppuid,
        String branchCode,
        String countryCode,
        String eventId,
        String propertyType) {

    // Step 1: Directly fetch IDs (not full entity)
    List<Long> transactionPropertyIds =
            transactionPropertiesRepository.findTransactionPropertyIdsByEventIdAndPropertyType(eventId, propertyType);

    if (transactionPropertyIds.isEmpty()) {
        return Collections.emptyList();
    }

    // Step 2: Fetch full TransactionalProperty using helper
    List<TransactionalProperty> transactionProperties = dpwEventHelper.getTransactionPropertiesFromRef(
            transactionPropertyIds.stream()
                    .map(String::valueOf)
                    .collect(Collectors.joining(","))
    );

    // Step 3: Extract property names
    return transactionProperties.stream()
            .map(TransactionalProperty::getPropertyName)
            .filter(Objects::nonNull)
            .collect(Collectors.toList());
}



@Query("SELECT e.transactionPropertyId FROM EventTransactionPropertiesEntity e WHERE e.eventId = :eventId AND e.propertyType = :propertyType")
List<Long> findTransactionPropertyIdsByEventIdAndPropertyType(@Param("eventId") String eventId, @Param("propertyType") String propertyType);
