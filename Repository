Here is the cleaned and updated GoodsRegistrationComponent (TypeScript code) to match your HTML form and ensure full integration, with proper form controls and structure:


---

goods-registration.component.ts

import { Component, OnInit } from '@angular/core';
import { GoodsService } from 'src/app/services/goods.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CategoryService } from 'src/app/services/category.service';

@Component({
  selector: 'app-goods-registration',
  templateUrl: './goods-registration.component.html',
  styleUrls: ['./goods-registration.component.css']
})
export class GoodsRegistrationComponent implements OnInit {
  goodsList: any[] = [];
  goodsForm!: FormGroup;
  editMode = false;
  selectedGoodsId: number | null = null;
  categories: any[] = [];

  constructor(
    private goodsService: GoodsService,
    private fb: FormBuilder,
    private categoryService: CategoryService
  ) {}

  ngOnInit(): void {
    this.initForm();
    this.loadGoods();
    this.loadCategories();
    this.setCurrentUserId();
  }

  initForm() {
    this.goodsForm = this.fb.group({
      name: ['', Validators.required],
      quantity: [0, Validators.required],
      unitOfMeasure: ['', Validators.required],
      location: ['', Validators.required],
      expiryDate: ['', Validators.required],
      acquisitionDate: ['', Validators.required],
      minimumStockLevel: [0, Validators.required],
      price: [0, Validators.required],
      supplier: ['', Validators.required],
      status: ['PENDING', Validators.required],
      userId: ['', Validators.required],
      categoryId: ['', Validators.required]
    });
  }

  loadGoods() {
    this.goodsService.getAllGoods().subscribe((data) => {
      this.goodsList = data;
    });
  }

  loadCategories() {
    this.categoryService.getAll().subscribe((data) => {
      this.categories = data;
    });
  }

  setCurrentUserId() {
    const currentUser = JSON.parse(localStorage.getItem('user') || 'null');
    if (currentUser && currentUser.id) {
      this.goodsForm.patchValue({ userId: currentUser.id });
    }
  }

  saveGoods() {
    if (this.goodsForm.invalid) {
      alert('Invalid details. Please check the form.');
      return;
    }

    this.goodsForm.patchValue({ status: 'PENDING' });
    this.setCurrentUserId();

    if (this.editMode && this.selectedGoodsId !== null) {
      this.goodsService.updateGoods(this.selectedGoodsId, this.goodsForm.value).subscribe(() => {
        this.loadGoods();
        this.resetForm();
      });
    } else {
      this.goodsService.createGoods(this.goodsForm.value).subscribe(() => {
        this.loadGoods();
        this.resetForm();
      });
    }
  }

  editGoods(goods: any) {
    this.goodsForm.patchValue(goods);
    this.selectedGoodsId = goods.id;
    this.editMode = true;
  }

  deleteGoods(id: number) {
    if (confirm('Are you sure you want to delete this goods?')) {
      this.goodsService.deleteGoods(id).subscribe(() => {
        this.loadGoods();
      });
    }
  }

  resetForm() {
    this.goodsForm.reset();
    this.goodsForm.patchValue({ status: 'PENDING' });
    this.editMode = false;
    this.selectedGoodsId = null;
    this.setCurrentUserId();
  }
}


---

Would you like the CSS styles now for making this form and table visually attractive and separated as per your layout request?
