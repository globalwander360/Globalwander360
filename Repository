

register.component.ts

import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent {
  registerForm: FormGroup;
  submitted = false;

  roles = [
    { label: 'User', value: 'USER' },
    { label: 'Admin', value: 'ADMIN' },
    { label: 'Logistic Coordinator', value: 'LOGISTIC_COORDINATOR' }
  ];

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    this.registerForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
      role: ['', Validators.required]
    });
  }

  get f() {
    return this.registerForm.controls;
  }

  register() {
    this.submitted = true;
    if (this.registerForm.invalid) {
      return;
    }

    this.authService.register(this.registerForm.value).subscribe(() => {
      alert('Registration successful');
      this.router.navigate(['/']);
    });
  }
}


---

register.component.html

<div class="form-container">
  <h2>Register</h2>
  <form [formGroup]="registerForm" (ngSubmit)="register()" novalidate>
    <div class="form-field">
      <input type="text" pInputText formControlName="email" placeholder="Email" />
      <div class="error" *ngIf="submitted && f.email.errors">
        <small *ngIf="f.email.errors.required">Email is required.</small>
        <small *ngIf="f.email.errors.email">Invalid email format.</small>
      </div>
    </div>

    <div class="form-field">
      <input type="password" pPassword formControlName="password" placeholder="Password" />
      <div class="error" *ngIf="submitted && f.password.errors">
        <small *ngIf="f.password.errors.required">Password is required.</small>
        <small *ngIf="f.password.errors.minlength">Minimum 6 characters required.</small>
      </div>
    </div>

    <div class="form-field">
      <p-dropdown [options]="roles" formControlName="role" placeholder="Select Role"></p-dropdown>
      <div class="error" *ngIf="submitted && f.role.errors">
        <small>Role selection is required.</small>
      </div>
    </div>

    <button pButton type="submit" label="Register" class="btn-submit"></button>
  </form>
</div>


---

register.component.css

.form-container {
  max-width: 400px;
  margin: 50px auto;
  padding: 24px;
  background: #f9f9f9;
  border-radius: 12px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.form-field {
  margin-bottom: 18px;
}

input, p-dropdown {
  width: 100%;
}

.error {
  color: red;
  font-size: 12px;
  margin-top: 4px;
}

.btn-submit {
  width: 100%;
  margin-top: 10px;
}



Hereâ€™s your fully updated LoginComponent with proper validation, user-friendly error messages, and clean, professional CSS that matches the register page styling.


---

login.component.ts

import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  loginForm: FormGroup;
  submitted = false;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required]
    });
  }

  get f() {
    return this.loginForm.controls;
  }

  login() {
    this.submitted = true;
    if (this.loginForm.invalid) {
      return;
    }

    this.authService.login(this.loginForm.value).subscribe(
      response => {
        const role = response.role;
        localStorage.setItem('role', response.role);
        localStorage.setItem('user', JSON.stringify(response));

        if (role === 'USER') {
          this.router.navigate(['/user-dashboard']);
        } else if (role === 'ADMIN') {
          this.router.navigate(['/admin-dashboard']);
        } else if (role === 'LOGISTIC_COORDINATOR') {
          this.router.navigate(['/coordinator-dashboard']);
        } else {
          alert('Unauthorized role');
        }
      },
      error => {
        alert('Login failed. Please check your credentials.');
      }
    );
  }

  navigateTo(path: string): void {
    this.router.navigate([path]);
  }
}


---

login.component.html

<div class="form-container">
  <h2>Login</h2>
  <form [formGroup]="loginForm" (ngSubmit)="login()" novalidate>
    <div class="form-field">
      <input type="text" formControlName="email" pInputText placeholder="Email" />
      <div class="error" *ngIf="submitted && f.email.errors">
        <small *ngIf="f.email.errors.required">Email is required.</small>
        <small *ngIf="f.email.errors.email">Invalid email format.</small>
      </div>
    </div>

    <div class="form-field">
      <input type="password" formControlName="password" pPassword placeholder="Password" />
      <div class="error" *ngIf="submitted && f.password.errors">
        <small>Password is required.</small>
      </div>
    </div>

    <button pButton type="submit" label="Login" class="btn-submit"></button>
    <button type="button" class="btn-link" (click)="navigateTo('/register')">Don't have an account? Register</button>
  </form>
</div>


---

login.component.css

.form-container {
  max-width: 400px;
  margin: 50px auto;
  padding: 24px;
  background: #f9f9f9;
  border-radius: 12px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.form-field {
  margin-bottom: 18px;
}

input, p-password {
  width: 100%;
}

.error {
  color: red;
  font-size: 12px;
  margin-top: 4px;
}

.btn-submit {
  width: 100%;
  margin-top: 10px;
}

.btn-link {
  margin-top: 12px;
  background: none;
  border: none;
  color: #007bff;
  text-decoration: underline;
  cursor: pointer;
  display: block;
  width: 100%;
  text-align: center;
}


