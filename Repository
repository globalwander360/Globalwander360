@Override
public List<String> getPropertyNamesByEventIdAndType(String eventId, String propertyType) {
    List<EventTransactionPropertiesEntity> eventTxnProps = transactionPropertiesRepository
            .findByEventIdAndPropertyType(eventId, propertyType);

    if (eventTxnProps.isEmpty()) {
        return Collections.emptyList();
    }

    // Step 2: Extract transactionPropertyIds
    List<Long> transactionPropertyIds = eventTxnProps.stream()
            .map(EventTransactionPropertiesEntity::getTransactionPropertyId)
            .filter(Objects::nonNull)
            .distinct()
            .collect(Collectors.toList());

    if (transactionPropertyIds.isEmpty()) {
        return Collections.emptyList();
    }

    // Step 3: Get transaction properties from helper
    List<TransactionalProperty> transactionProperties =
            dpwEventHelper.getTransactionPropertiesFromRef(String.valueOf(transactionPropertyIds));

    if (transactionProperties == null || transactionProperties.isEmpty()) {
        return Collections.emptyList();
    }

    // Step 4: Extract property names directly
    List<String> propertyNames = transactionProperties.stream()
            .map(TransactionalProperty::getPropertyName)
            .filter(Objects::nonNull)
            .distinct()
            .collect(Collectors.toList());

    return propertyNames;
}

// Add this new method to get single property name for a specific event
@Override
public String getPropertyNameByEventIdAndType(String eventId, String propertyType) {
    List<String> propertyNames = getPropertyNamesByEventIdAndType(eventId, propertyType);
    
    // Return the first property name if available, otherwise return null or empty string
    return propertyNames.isEmpty() ? null : propertyNames.get(0);
}



@Override
@PreAuthorize("hasOpsPermission(#branchCode, null, 'ReadEvent')")
public ResponseEntity<byte[]> exportEvents(String branchCode, String bnppuid, String countryCode, 
        String acceptLanguage, String q, Integer skip, Integer take, String orderBy, 
        SortDirection direction, String timezone, Export export) {

    ArrayList<String> fields = getAllFieldsSimpleNames(EventEntity.class);

    RsqlSearchCriteria rsqlSearchCriteria = new RsqlSearchCriteria();
    rsqlSearchCriteria.setPgpeCodes(export.getPgpeCodes());

    if (!fields.contains(orderBy))
        orderBy = null;

    final PageRequest pageRequest = ControllerUtils.createPageRequest(skip, exportLimit, orderBy, 
            defaultOrder: "id", direction);

    List<DpwEventExportDTO> eventExportDtoList;
    EventListsPage eventListsPage;

    try {
        eventListsPage = eventService.filterEvents(q, pageRequest, bnppuid, exportFile: true, 
                customQueueCount: null, branchCode, countryCode, rsqlSearchCriteria);

        eventExportDtoList = eventMapper.mapToEventExportDtoList(eventListsPage.getResults());

        // Populate transaction property names for each event
        for (DpwEventExportDTO dpwEventExportDTO : eventExportDtoList) {
            setSystemSpecificDateTimeForEvent(dpwEventExportDTO, timezone);
            
            // Get and set transaction property name for this specific event
            String propertyName = translationPropertiesService.getPropertyNameByEventIdAndType(
                    dpwEventExportDTO.getId(), // Assuming getId() returns the event ID
                    "YOUR_PROPERTY_TYPE" // Replace with your actual property type
            );
            dpwEventExportDTO.setTransactionpropertyname(propertyName);
        }
    } catch (Exception e) {
        log.error("Export events error:", e);
        Thread.currentThread().interrupt();
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    }

    try {
        ExcelExportHelper<DpwEventExportDTO> excelExportHelper = new ExcelExportHelper<>(eventExportDtoList,
                DpwEventExportDTO.class, getFormattedDateColumn(export.getColumns()), export.getExcelHeaders());

        ByteArrayOutputStream bos = excelExportHelper.createFileContent(eventListsPage.getExcelCount());
        HttpHeaders responseHeaders = excelExportHelper.generateHttpHeaders(bos);

        return new ResponseEntity<>(bos.toByteArray(), responseHeaders, HttpStatus.OK);

    } catch (IOException e) {
        log.error("exportEvents error:", e);
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    }
}



public class DPWEventExportDTO {
    private String id; // Event ID
    private String transactionpropertyname;
    
    // Other existing fields...
    
    // Constructors
    public DPWEventExportDTO() {}
    
    // Getters and Setters
    public String getId() {
        return id;
    }
    
    public void setId(String id) {
        this.id = id;
    }
    
    public String getTransactionpropertyname() {
        return transactionpropertyname;
    }
    
    public void setTransactionpropertyname(String transactionpropertyname) {
        this.transactionpropertyname = transactionpropertyname;
    }
    
    // Other existing getters and setters...
}


// Add this method to your TranslationPropertiesService interface

public interface TranslationPropertiesService {
    
    // Existing method
    public List<String> getPropertyNamesByEventIdAndType(String eventId, String propertyType);
    
    // New method to get single property name
    public String getPropertyNameByEventIdAndType(String eventId, String propertyType);
    
    // Other existing methods...
}


