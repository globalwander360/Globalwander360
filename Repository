import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../services/auth.service';
import { MessageService } from 'primeng/api';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent {
  registerForm: FormGroup;
  
  roles = [
    { label: 'User', value: 'USER' },
    { label: 'Admin', value: 'ADMIN' },
    { label: 'Logistic Coordinator', value: 'LOGISTIC_COORDINATOR' }
  ];
  
  submitted = false;

  constructor(
    private fb: FormBuilder, 
    private authService: AuthService, 
    private router: Router,
    private messageService: MessageService
  ) {
    this.registerForm = this.fb.group({
      email: ['', [Validators.required, Validators.email, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')]],
      password: ['', [Validators.required, Validators.minLength(8), 
                    Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}')]],
      role: ['', Validators.required]
    });
  }

  // Getter for easy access to form fields
  get f() { return this.registerForm.controls; }

  register() {
    this.submitted = true;
    
    // Stop here if form is invalid
    if (this.registerForm.invalid) {
      if (this.f['email'].errors) {
        if (this.f['email'].errors['required']) {
          this.messageService.add({severity: 'error', summary: 'Error', detail: 'Email is required'});
        } else if (this.f['email'].errors['email'] || this.f['email'].errors['pattern']) {
          this.messageService.add({severity: 'error', summary: 'Error', detail: 'Email format is invalid'});
        }
      }
      
      if (this.f['password'].errors) {
        if (this.f['password'].errors['required']) {
          this.messageService.add({severity: 'error', summary: 'Error', detail: 'Password is required'});
        } else if (this.f['password'].errors['minlength']) {
          this.messageService.add({severity: 'error', summary: 'Error', detail: 'Password must be at least 8 characters'});
        } else if (this.f['password'].errors['pattern']) {
          this.messageService.add({severity: 'error', summary: 'Error', 
            detail: 'Password must contain uppercase, lowercase, number and special character'});
        }
      }
      
      if (this.f['role'].errors && this.f['role'].errors['required']) {
        this.messageService.add({severity: 'error', summary: 'Error', detail: 'Role selection is required'});
      }
      
      return;
    }

    this.authService.register(this.registerForm.value).subscribe({
      next: () => {
        this.messageService.add({severity: 'success', summary: 'Success', detail: 'Registration successful!'});
        setTimeout(() => {
          this.router.navigate(['/login']);
        }, 1500);
      },
      error: (error) => {
        this.messageService.add({severity: 'error', summary: 'Error', 
          detail: error.message || 'Registration failed. Please try again.'});
      }
    });
  }
}



<div class="register-container">
  <div class="register-card">
    <h2>Create Account</h2>
    <p-toast></p-toast>
    
    <form [formGroup]="registerForm" (ngSubmit)="register()">
      <div class="form-group">
        <label for="email">Email</label>
        <input 
          id="email"
          type="text" 
          formControlName="email" 
          pInputText 
          placeholder="Enter your email"
          [ngClass]="{'ng-invalid ng-dirty': submitted && f['email'].errors}"
        >
        <small class="error-message" *ngIf="submitted && f['email'].errors">
          <span *ngIf="f['email'].errors['required']">Email is required</span>
          <span *ngIf="f['email'].errors['email'] || f['email'].errors['pattern']">Please enter a valid email address</span>
        </small>
      </div>

      <div class="form-group">
        <label for="password">Password</label>
        <p-password 
          id="password"
          formControlName="password" 
          [toggleMask]="true"
          placeholder="Create a password"
          [ngClass]="{'ng-invalid ng-dirty': submitted && f['password'].errors}"
          [feedback]="true"
        ></p-password>
        <small class="error-message" *ngIf="submitted && f['password'].errors">
          <span *ngIf="f['password'].errors['required']">Password is required</span>
          <span *ngIf="f['password'].errors['minlength']">Password must be at least 8 characters</span>
          <span *ngIf="f['password'].errors['pattern']">Password must include uppercase, lowercase, number and special character</span>
        </small>
      </div>

      <div class="form-group">
        <label for="role">Select Role</label>
        <p-dropdown 
          id="role"
          [options]="roles" 
          formControlName="role" 
          placeholder="Select your role"
          [ngClass]="{'ng-invalid ng-dirty': submitted && f['role'].errors}"
        ></p-dropdown>
        <small class="error-message" *ngIf="submitted && f['role'].errors && f['role'].errors['required']">
          Role selection is required
        </small>
      </div>

      <div class="form-actions">
        <button pButton type="submit" label="Register" icon="pi pi-user-plus" class="register-button"></button>
      </div>
      
      <div class="login-redirect">
        Already have an account? <a [routerLink]="['/login']">Login</a>
      </div>
    </form>
  </div>
</div>




/* Main Container Styles */
.register-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #f8f9fa;
  padding: 20px;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.register-card {
  width: 100%;
  max-width: 480px;
  background-color: #ffffff;
  border-radius: 12px;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
  padding: 32px;
  animation: fadeIn 0.5s ease;
}

/* Header Styles */
.register-card h2 {
  color: #333;
  margin-bottom: 8px;
  font-weight: 600;
  text-align: center;
  font-size: 1.8rem;
  padding-bottom: 12px;
  border-bottom: 2px solid #3498db;
  margin-bottom: 24px;
}

/* Form Styles */
.form-group {
  margin-bottom: 22px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: #444;
  font-size: 0.95rem;
}

/* Override PrimeNG Styles */
:host ::ng-deep .p-inputtext,
:host ::ng-deep .p-password,
:host ::ng-deep .p-dropdown {
  width: 100%;
  padding: 12px;
  border-radius: 6px;
  transition: all 0.3s ease;
}

:host ::ng-deep .p-dropdown {
  height: 48px;
}

:host ::ng-deep .p-inputtext:enabled:focus,
:host ::ng-deep .p-dropdown:focus {
  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.25);
  border-color: #3498db;
}

:host ::ng-deep .p-password-input {
  width: 100%;
}

/* Error Message Styles */
.error-message {
  color: #e74c3c;
  font-size: 0.85rem;
  display: block;
  margin-top: 5px;
  animation: fadeIn 0.3s ease;
}

:host ::ng-deep .ng-dirty.ng-invalid {
  border-color: #e74c3c;
}

/* Button Styles */
.form-actions {
  margin-top: 28px;
}

:host ::ng-deep .register-button {
  width: 100%;
  padding: 12px;
  background-color: #3498db;
  border-color: #3498db;
  font-weight: 500;
  font-size: 1rem;
  transition: all 0.3s ease;
}

:host ::ng-deep .register-button:hover {
  background-color: #2980b9;
  border-color: #2980b9;
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

:host ::ng-deep .register-button:active {
  transform: translateY(1px);
  box-shadow: none;
}

/* Login Redirect Link */
.login-redirect {
  text-align: center;
  margin-top: 20px;
  font-size: 0.9rem;
  color: #555;
}

.login-redirect a {
  color: #3498db;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.2s ease;
}

.login-redirect a:hover {
  color: #2980b9;
  text-decoration: underline;
}

/* Toast Message Override */
:host ::ng-deep .p-toast .p-toast-message {
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* Responsive adjustments */
@media (max-width: 576px) {
  .register-card {
    padding: 24px 20px;
  }
  
  .register-card h2 {
    font-size: 1.5rem;
  }
}


