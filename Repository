Perfect Harish! ‚úÖ Tumhara use-case ab crystal clear hai.

‚úÖ Final Method in TransactionPropertyServiceImpl.java:

@Override
public List<String> getPropertyNamesByEventIdAndType(
        String eventId, String propertyType) {

    // Step 1: Get all properties matching propertyType via repository
    List<TransactionProperties> matchingTypeProps = transactionPropertiesRepository
            .findByPropertyTypeIgnoreCase(propertyType);

    if (matchingTypeProps.isEmpty()) {
        return Collections.emptyList();
    }

    // Step 2: Create Map of propertyId -> propertyName using dpwEventHelper
    Map<String, String> propertyIdToNameMap = new HashMap<>();
    for (TransactionProperties prop : matchingTypeProps) {
        TransactionProperties fullProp = dpwEventHelper.getTransactionPropertiesFromRef(prop.getId());
        if (fullProp != null && fullProp.getPropertyName() != null) {
            propertyIdToNameMap.put(prop.getId(), fullProp.getPropertyName());
        }
    }

    // Step 3: Get all properties for the given eventId
    List<TransactionProperties> eventProperties = transactionPropertiesRepository
            .findByEventId(eventId);

    if (eventProperties.isEmpty()) {
        return Collections.emptyList();
    }

    // Step 4: Match event's properties with map and collect names
    List<String> propertyNames = eventProperties.stream()
            .map(TransactionProperties::getId)
            .filter(propertyIdToNameMap::containsKey)
            .map(propertyIdToNameMap::get)
            .filter(Objects::nonNull)
            .distinct()
            .collect(Collectors.toList());

    return propertyNames;
}


---

‚úÖ Repository Interface:

List<TransactionProperties> findByEventId(String eventId);
List<TransactionProperties> findByPropertyTypeIgnoreCase(String propertyType);


---

‚úÖ Controller Layer:

@GetMapping("/property-names")
@PreAuthorize("hasOpsPermission(branchCode, null, 'ReadTransactionProperties')")
public ResponseEntity<List<String>> getPropertyNamesByTypeAndEvent(
        @RequestHeader("bnppuid") String bnppuid,
        @RequestHeader("branchCode") String branchCode,
        @RequestHeader("countryCode") String countryCode,
        @RequestParam("eventId") String eventId,
        @RequestParam("propertyType") String propertyType) {

    if (StringUtils.isAnyBlank(bnppuid, branchCode, countryCode, eventId, propertyType)) {
        throw new BadRequestException("Missing required headers or parameters");
    }

    List<String> names = transactionPropertyService
            .getPropertyNamesByEventIdAndType(eventId, propertyType);

    return ResponseEntity.ok(names);
}


---

‚úÖ Sample Output:

[
  "Completion Motive",
  "Rejection Reason",
  "Transaction Reason"
]


---

‚úÖ OpenAPI Spec Snippet (YAML):

paths:
  /transaction-properties/property-names:
    get:
      summary: Get Property Names by Event ID and Type
      description: Returns property names linked to an event and filtered by propertyType.
      operationId: getPropertyNamesByTypeAndEvent
      parameters:
        - name: bnppuid
          in: header
          required: true
          schema: { type: string }
        - name: branchCode
          in: header
          required: true
          schema: { type: string }
        - name: countryCode
          in: header
          required: true
          schema: { type: string }
        - name: eventId
          in: query
          required: true
          schema: { type: string }
        - name: propertyType
          in: query
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { type: string }



Bilkul Harish! üî•
Tu keh raha hai ki:

> eventId ‚Üí EventTransactionPropertiesEntity ‚Üí transactionPropertiesId
transactionPropertiesId ‚Üí TransactionPropertyEntity ‚Üí propertyName
(Aur TransactionPropertyEntity ka data dpwEventHelper.getTransactionPropertiesFromRef(id) se aata hai)




---

üîÑ Clear Flow:

1. Step 1: eventId se get all EventTransactionPropertiesEntity


2. Step 2: Un sab ka transactionPropertiesId le


3. Step 3: dpwEventHelper.getTransactionPropertiesFromRef(id) se propertyName nikal


4. Step 4: Agar propertyType match karta hai to list me us propertyName ko add kar




---

‚úÖ Final Code (Service Impl)

@Override
public List<String> getPropertyNamesByEventIdAndType(String eventId, String propertyType) {

    // Step 1: Get all EventTransactionProperties for this event
    List<EventTransactionPropertiesEntity> eventProps = eventTransactionPropertiesRepository
            .findByEventId(eventId);

    if (eventProps.isEmpty()) {
        return Collections.emptyList();
    }

    // Step 2: Extract transactionPropertyIds
    List<String> transactionPropertyIds = eventProps.stream()
            .map(EventTransactionPropertiesEntity::getTransactionPropertiesId)
            .filter(Objects::nonNull)
            .collect(Collectors.toList());

    if (transactionPropertyIds.isEmpty()) {
        return Collections.emptyList();
    }

    // Step 3: Use dpwHelper to get full property details and filter by type
    List<String> propertyNames = new ArrayList<>();

    for (String propertyId : transactionPropertyIds) {
        TransactionProperties fullProp = dpwEventHelper.getTransactionPropertiesFromRef(propertyId);
        if (fullProp != null 
                && fullProp.getPropertyType() != null 
                && fullProp.getPropertyType().equalsIgnoreCase(propertyType)
                && fullProp.getPropertyName() != null) {
            propertyNames.add(fullProp.getPropertyName());
        }
    }

    return propertyNames;
}


---

‚úÖ Repository Interfaces

// Event side repository
List<EventTransactionPropertiesEntity> findByEventId(String eventId);

‚úÖ Entity Mapping:

EventTransactionPropertiesEntity.java

public class EventTransactionPropertiesEntity {
    private String eventId;
    private String transactionPropertiesId; // foreign key
}

TransactionProperties.java

public class TransactionProperties {
    private String id;
    private String propertyName;
    private String propertyType;
}


---

üîÅ Controller Endpoint

@GetMapping("/property-names")
public ResponseEntity<List<String>> getPropertyNamesByEventAndType(
        @RequestHeader("bnppuid") String bnppuid,
        @RequestHeader("branchCode") String branchCode,
        @RequestHeader("countryCode") String countryCode,
        @RequestParam("eventId") String eventId,
        @RequestParam("propertyType") String propertyType) {

    if (StringUtils.isAnyBlank(bnppuid, branchCode, countryCode, eventId, propertyType)) {
        throw new BadRequestException("Missing required parameters");
    }

    List<String> names = transactionPropertyService
            .getPropertyNamesByEventIdAndType(eventId, propertyType);

    return ResponseEntity.ok(names);
}


---

üî• Sample Response

[
  "Completion Motive",
  "Rejection Comment"
]


---

‚úÖ Summary:

Item	Status

eventId based fetch	‚úÖ Done
Foreign key via EventTransactionPropertiesEntity	‚úÖ Used
dpwHelper usage	‚úÖ Done
Filter by propertyType	‚úÖ Done
Return propertyName list	‚úÖ Done



---

Agar chaho to:

Object instead of just name return karein (ID + Name)

Frontend sample bana doon

Postman test case likh doon


Bol Harish Bhai üòé


