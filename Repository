import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class TransactionPropertyServiceTest {

    @Mock
    private TransactionPropertiesRepository transactionPropertiesRepository;

    @InjectMocks
    private TransactionPropertyServiceImpl transactionPropertyService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetPropertyNamesByEventIdAndType() {
        String eventId = "EVT123";
        String propertyType = "TYPE1";

        // Case 1: Non-empty list
        List<Long> expectedIds = Arrays.asList(1L, 2L, 3L);
        when(transactionPropertiesRepository.getPropertyNamesByEventIdAndType(eventId, propertyType))
                .thenReturn(expectedIds);

        List<Long> result = transactionPropertyService.getPropertyNamesByEventIdAndType("user1", "BR01", "IN", eventId, propertyType);

        assertNotNull(result);
        assertEquals(3, result.size());
        assertEquals(expectedIds, result);

        // Case 2: Empty list
        when(transactionPropertiesRepository.getPropertyNamesByEventIdAndType("EVT_EMPTY", propertyType))
                .thenReturn(Collections.emptyList());

        List<Long> emptyResult = transactionPropertyService.getPropertyNamesByEventIdAndType("user2", "BR02", "US", "EVT_EMPTY", propertyType);

        assertNotNull(emptyResult);
        assertTrue(emptyResult.isEmpty());
    }
}
