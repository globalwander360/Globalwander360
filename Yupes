@Test
public void shouldReturnExcelFile_WhenExportEventsIsSuccessful() throws Exception {
    String branchCode = "BR001";
    String bnppuid = "e12928";
    String countryCode = "FR";
    String acceptLanguage = "en";
    String q = "filter";
    Integer skip = 0;
    Integer take = 10;
    String orderBy = "date";
    SortDirection direction = SortDirection.ASC;
    String timezone = "UTC";
    Export export = new Export();
    export.setPgpeCodes(List.of("PG1"));
    export.setColumns(List.of("column1"));
    export.setExcelHeaders(List.of("Header1"));

    List<DpwEvent> events = List.of(new DpwEvent());
    Page<DpwEvent> page = new PageImpl<>(events);
    EventListsPage eventListsPage = new EventListsPage();
    eventListsPage.setResults(events);
    eventListsPage.setExcelCount(1);

    List<DpwEventExportDTO> exportDTOList = List.of(new DpwEventExportDTO());

    when(eventService.filterEvents(anyString(), any(), anyString(), anyBoolean(), any(), anyString(), anyString(), any()))
        .thenReturn(eventListsPage);

    when(eventMapper.mapToEventExportDtoList(anyList())).thenReturn(exportDTOList);
    when(requestServiceImpl.getPropertyIdNames(anyString())).thenReturn(Map.of());
    when(transactionPropertyService.getPropertyNames(any(), any())).thenReturn("Property Name");

    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    bos.write("Excel Data".getBytes());

    ExcelExportHelper<DpwEventExportDTO> helper = mock(ExcelExportHelper.class);
    when(helper.createFileContent(anyInt())).thenReturn(bos);
    when(helper.generateHttpHeaders(any())).thenReturn(new HttpHeaders());

    try (MockedConstruction<ExcelExportHelper> mocked = mockConstruction(ExcelExportHelper.class,
        (mock, context) -> {
            when(mock.createFileContent(anyInt())).thenReturn(bos);
            when(mock.generateHttpHeaders(any())).thenReturn(new HttpHeaders());
        })) {

        ResponseEntity<byte[]> response = requestController.exportEvents(
            branchCode, bnppuid, countryCode, acceptLanguage, q, skip, take, orderBy,
            direction, timezone, export
        );

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }
}

@Test
public void shouldReturnInternalServerError_WhenFilterEventsFails() {
    String branchCode = "BR001";
    String bnppuid = "e12928";
    String countryCode = "FR";
    Export export = new Export();
    export.setPgpeCodes(List.of("PG1"));
    export.setColumns(List.of("col1"));

    when(eventService.filterEvents(any(), any(), any(), anyBoolean(), any(), any(), any(), any()))
        .thenThrow(new RuntimeException("Filter Failed"));

    ResponseEntity<byte[]> response = requestController.exportEvents(
        branchCode, bnppuid, countryCode, null, null, 0, 10, null,
        SortDirection.ASC, "UTC", export
    );

    assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
}

@Test
public void shouldReturnInternalServerError_WhenExcelExportFails() throws Exception {
    String branchCode = "BR001";
    String bnppuid = "e12928";
    String countryCode = "FR";
    Export export = new Export();
    export.setPgpeCodes(List.of("PG1"));
    export.setColumns(List.of("column1"));
    export.setExcelHeaders(List.of("Header1"));

    List<DpwEvent> events = List.of(new DpwEvent());
    EventListsPage eventListsPage = new EventListsPage();
    eventListsPage.setResults(events);
    eventListsPage.setExcelCount(1);

    when(eventService.filterEvents(any(), any(), any(), anyBoolean(), any(), any(), any(), any()))
        .thenReturn(eventListsPage);
    when(eventMapper.mapToEventExportDtoList(any())).thenReturn(List.of(new DpwEventExportDTO()));
    when(requestServiceImpl.getPropertyIdNames(anyString())).thenReturn(Map.of());
    when(transactionPropertyService.getPropertyNames(any(), any())).thenReturn("Property");

    try (MockedConstruction<ExcelExportHelper> mocked = mockConstruction(ExcelExportHelper.class,
        (mock, context) -> {
            when(mock.createFileContent(anyInt())).thenThrow(new IOException("IO fail"));
        })) {

        ResponseEntity<byte[]> response = requestController.exportEvents(
            branchCode, bnppuid, countryCode, null, null, 0, 10, null,
            SortDirection.ASC, "UTC", export
        );

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }
}

