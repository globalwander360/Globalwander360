package com.example.service;

import com.example.model.TransactionalProperty;
import com.example.repository.ReferentialUtil;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.*;

@ExtendWith(MockitoExtension.class)
public class RequestServiceTest {

    @Mock
    private ReferentialUtil referentialUtil;

    @InjectMocks
    private RequestService requestService;

    @Test
    public void getPropertyIdNames_ShouldReturnMapWithValidProperties() {
        // Arrange
        String bnppuid = "e12928";

        TransactionalProperty prop1 = new TransactionalProperty();
        prop1.setId("P1");
        prop1.setPropertyName("C1");

        TransactionalProperty prop2 = new TransactionalProperty();
        prop2.setId("P2");
        prop2.setPropertyName("C2");

        TransactionalProperty prop3 = new TransactionalProperty();
        prop3.setId("P3");
        prop3.setPropertyName(null); // Should be ignored

        List<TransactionalProperty> mockList = Arrays.asList(prop1, prop2, prop3);
        when(referentialUtil.getCompletionMotiveList(bnppuid)).thenReturn(mockList);

        // Act
        Map<String, String> result = requestService.getPropertyIdNames(bnppuid);

        // Assert
        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("C1", result.get("P1"));
        assertEquals("C2", result.get("P2"));
        assertFalse(result.containsKey("P3")); // Null propertyName should be ignored
    }
}
