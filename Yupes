@Test
public void testGetPropertyIdNames_AllScenarios() {
    String bnppuid = "user123";

    TransactionalProperty prop1 = new TransactionalProperty();
    prop1.setId("P1");
    prop1.setPropertyName("Name1");

    TransactionalProperty prop2 = new TransactionalProperty();
    prop2.setId("P2");
    prop2.setPropertyName(null);  // should be filtered out

    TransactionalProperty prop3 = new TransactionalProperty();
    prop3.setId("P3");
    prop3.setPropertyName("Name3");

    List<TransactionalProperty> mockList = Arrays.asList(prop1, prop2, prop3);

    when(referentialUtil.getCompletionMotiveList(bnppuid)).thenReturn(mockList);

    Map<String, String> result = yourService.getPropertyIdNames(bnppuid);

    Map<String, String> expected = new HashMap<>();
    expected.put("P1", "Name1");
    expected.put("P3", "Name3");

    assertEquals(expected, result);
}



@Test
public void testGetBranches_ExceptionThrown() {
    String bnppuid = "123";
    String branchCode = "BR01";
    String countryCode = "IN";

    when(branchApi.searchBranch(
        eq(bnppuid), any(), any(), any(),
        eq(branchCode), eq(countryCode),
        any(), any(), any(), any()
    )).thenThrow(new RuntimeException("API error"));

    List<Branch> result = yourService.getBranches(bnppuid, branchCode, countryCode);

    assertEquals(Collections.emptyList(), result); // returns List.of()
}
