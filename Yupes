@Test
public void testGetPropertyNamesByEventIdAndType_WithNonEmptyList() {
    String eventId = "event123";
    String propertyType = "COMPLETION_MOTIVE";
    List<Long> expectedIds = Arrays.asList(1L, 2L, 3L);

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, propertyType))
            .thenReturn(expectedIds);

    List<Long> result = service.getPropertyNamesByEventIdAndType(eventId, propertyType);

    assertEquals(expectedIds, result);
    assertEquals(3, result.size());
    verify(transactionPropertiesRepository).getIDByEventIdAndPropertyType(eventId, propertyType);
}

@Test
public void testGetPropertyNamesByEventIdAndType_WithEmptyList() {
    String eventId = "event123";
    String propertyType = "COMPLETION_MOTIVE";
    List<Long> emptyList = Collections.emptyList();

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, propertyType))
            .thenReturn(emptyList);

    List<Long> result = service.getPropertyNamesByEventIdAndType(eventId, propertyType);

    assertTrue(result.isEmpty());
    assertSame(Collections.emptyList(), result);
    verify(transactionPropertiesRepository).getIDByEventIdAndPropertyType(eventId, propertyType);
}

@Test
public void testGetPropertyNames_SuccessPath_WithMultipleValidMappings() {
    String eventId = "event123";
    List<Long> propertyIds = Arrays.asList(1L, 2L, 3L);
    Map<String, String> propertyIdNameMap = new HashMap<>();
    propertyIdNameMap.put("1", "Property1");
    propertyIdNameMap.put("2", "Property2");
    propertyIdNameMap.put("3", "Property3");

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE"))
            .thenReturn(propertyIds);

    String result = service.getPropertyNames(eventId, propertyIdNameMap);

    assertEquals("Property1,Property2,Property3", result);
    verify(transactionPropertiesRepository).getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE");
}

@Test
public void testGetPropertyNames_SuccessPath_WithSingleValidMapping() {
    String eventId = "event123";
    List<Long> propertyIds = Arrays.asList(1L);
    Map<String, String> propertyIdNameMap = new HashMap<>();
    propertyIdNameMap.put("1", "Property1");

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE"))
            .thenReturn(propertyIds);

    String result = service.getPropertyNames(eventId, propertyIdNameMap);

    assertEquals("Property1", result);
}

@Test
public void testGetPropertyNames_SuccessPath_WithPartialValidMappings() {
    String eventId = "event123";
    List<Long> propertyIds = Arrays.asList(1L, 2L, 3L, 4L);
    Map<String, String> propertyIdNameMap = new HashMap<>();
    propertyIdNameMap.put("1", "Property1");
    propertyIdNameMap.put("3", "Property3");

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE"))
            .thenReturn(propertyIds);

    String result = service.getPropertyNames(eventId, propertyIdNameMap);

    assertEquals("Property1,Property3", result);
}

@Test
public void testGetPropertyNames_SuccessPath_WithEmptyPropertyIdsFromRepository() {
    String eventId = "event123";
    Map<String, String> propertyIdNameMap = new HashMap<>();
    propertyIdNameMap.put("1", "Property1");

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE"))
            .thenReturn(Collections.emptyList());

    String result = service.getPropertyNames(eventId, propertyIdNameMap);

    assertNull(result);
}

@Test
public void testGetPropertyNames_SuccessPath_WithNoMatchingNamesInMap() {
    String eventId = "event123";
    List<Long> propertyIds = Arrays.asList(1L, 2L, 3L);
    Map<String, String> propertyIdNameMap = new HashMap<>();
    propertyIdNameMap.put("4", "Property4");
    propertyIdNameMap.put("5", "Property5");

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE"))
            .thenReturn(propertyIds);

    String result = service.getPropertyNames(eventId, propertyIdNameMap);

    assertNull(result);
}

@Test
public void testGetPropertyNames_SuccessPath_WithNullValuesInMap() {
    String eventId = "event123";
    List<Long> propertyIds = Arrays.asList(1L, 2L, 3L);
    Map<String, String> propertyIdNameMap = new HashMap<>();
    propertyIdNameMap.put("1", "Property1");
    propertyIdNameMap.put("2", null);
    propertyIdNameMap.put("3", "Property3");

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE"))
            .thenReturn(propertyIds);

    String result = service.getPropertyNames(eventId, propertyIdNameMap);

    assertEquals("Property1,Property3", result);
}

@Test
public void testGetPropertyNames_ExceptionPath_RuntimeException() {
    String eventId = "event123";
    Map<String, String> propertyIdNameMap = new HashMap<>();

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE"))
            .thenThrow(new RuntimeException("Database connection failed"));

    String result = service.getPropertyNames(eventId, propertyIdNameMap);

    assertNull(result);
}

@Test
public void testGetPropertyNames_ExceptionPath_NullPointerException() {
    String eventId = "event123";
    Map<String, String> propertyIdNameMap = new HashMap<>();

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE"))
            .thenThrow(new NullPointerException("Null pointer in repository"));

    String result = service.getPropertyNames(eventId, propertyIdNameMap);

    assertNull(result);
}

@Test
public void testGetPropertyNames_ExceptionPath_IllegalArgumentException() {
    String eventId = "event123";
    Map<String, String> propertyIdNameMap = new HashMap<>();

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE"))
            .thenThrow(new IllegalArgumentException("Invalid event ID"));

    String result = service.getPropertyNames(eventId, propertyIdNameMap);

    assertNull(result);
}

@Test
public void testGetPropertyNames_ExceptionPath_InStreamProcessing() {
    String eventId = "event123";
    List<Long> propertyIds = Arrays.asList(1L, 2L, 3L);
    Map<String, String> faultyMap = new HashMap<String, String>() {
        @Override
        public String get(Object key) {
            if ("2".equals(key)) {
                throw new RuntimeException("Map access error");
            }
            return super.get(key);
        }
    };
    faultyMap.put("1", "Property1");
    faultyMap.put("3", "Property3");

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE"))
            .thenReturn(propertyIds);

    String result = service.getPropertyNames(eventId, faultyMap);

    assertNull(result);
}

@Test
public void testGetPropertyNames_WithEmptyMap() {
    String eventId = "event123";
    List<Long> propertyIds = Arrays.asList(1L, 2L, 3L);
    Map<String, String> emptyMap = new HashMap<>();

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE"))
            .thenReturn(propertyIds);

    String result = service.getPropertyNames(eventId, emptyMap);

    assertNull(result);
}

@Test
public void testGetPropertyNames_WithEmptyStringValues() {
    String eventId = "event123";
    List<Long> propertyIds = Arrays.asList(1L, 2L);
    Map<String, String> propertyIdNameMap = new HashMap<>();
    propertyIdNameMap.put("1", "");
    propertyIdNameMap.put("2", "Property2");

    when(transactionPropertiesRepository.getIDByEventIdAndPropertyType(eventId, "COMPLETION_MOTIVE"))
            .thenReturn(propertyIds);

    String result = service.getPropertyNames(eventId, propertyIdNameMap);

    assertEquals(",Property2", result);
}
