@Test
public void testGetPropertyNames_Success() {
    String eventid = "evt123";
    Map<String, String> propertyIdNameMap = new HashMap<>();
    propertyIdNameMap.put("1", "Name1");
    propertyIdNameMap.put("2", "Name2");

    List<Long> mockPropertyIds = Arrays.asList(1L, 2L, 3L); // 3L is not in map

    when(transactionPropertyService.getPropertyNamesByEventidAndType(eventid, "COMPLETION_MOTIVE"))
        .thenReturn(mockPropertyIds);

    String result = yourService.getPropertyNames(eventid, propertyIdNameMap);

    assertEquals("Name1,Name2", result);
}


@Test
public void testGetPropertyNames_EmptyAfterFiltering() {
    String eventid = "evt456";
    Map<String, String> propertyIdNameMap = new HashMap<>(); // no valid entries

    List<Long> mockPropertyIds = Arrays.asList(10L, 20L);

    when(transactionPropertyService.getPropertyNamesByEventidAndType(eventid, "COMPLETION_MOTIVE"))
        .thenReturn(mockPropertyIds);

    String result = yourService.getPropertyNames(eventid, propertyIdNameMap);

    assertNull(result);
}
@Test
public void testGetPropertyNames_ExceptionThrown() {
    String eventid = "evt789";
    Map<String, String> propertyIdNameMap = new HashMap<>();

    when(transactionPropertyService.getPropertyNamesByEventidAndType(eventid, "COMPLETION_MOTIVE"))
        .thenThrow(new RuntimeException("Service error"));

    String result = yourService.getPropertyNames(eventid, propertyIdNameMap);

    assertNull(result);
}

@Test
public void testExportEvents_WithValidPropertyNames() {
    String bnppuid = "user123";
    String eventId = "101";

    // Mock input event
    EventExportDTO mockDto = new EventExportDTO();
    mockDto.setId(eventId);

    List<EventExportDTO> eventList = List.of(mockDto);

    // Mock map returned by service method
    Map<String, String> propertyIdNameMap = new HashMap<>();
    propertyIdNameMap.put("1", "Name1");
    propertyIdNameMap.put("2", "Name2");

    // Stub method
    when(requestServiceImpl.getPropertyIdNames(bnppuid)).thenReturn(propertyIdNameMap);
    when(yourService.getPropertyNames(eventId, propertyIdNameMap)).thenReturn("Name1,Name2");

    // Mock event list page and mapping
    EventListsPage mockPage = mock(EventListsPage.class);
    when(mockPage.getResults()).thenReturn(List.of(new EventEntity()));

    when(eventService.filterEvents(any(), any(), eq(bnppuid), eq(true), any(), any(), any(), any()))
        .thenReturn(mockPage);
    when(eventMapper.mapToEventExportDTOList(any())).thenReturn(eventList);

    // Call the method under test
    ResponseEntity<?> response = yourService.exportEvents(...); // pass required args

    // Assertions
    assertEquals(HttpStatus.OK, response.getStatusCode());
    assertEquals("Name1,Name2", mockDto.getTransactionPropertyName());
}
