package com.bnpp.dpw.service.impl;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.ArgumentMatchers;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;

public class DpwEventHelperTest {

    @Mock
    private EventWorkflowApi eventWorkflowApi;
    
    @Mock
    private RequestRepository requestRepository;
    
    private DpwEventHelper dpwEventHelper;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        dpwEventHelper = new DpwEventHelper();
        // Initialize any required dependencies
    }

    @Test
    void updateWorkflowAndEventEntityBypassThresholdFlagTrue() {
        // Arrange
        String pgpeCodeList = "{\"france\":[\"SOMSC\", \"SOMAE\"],\"belgium\":[\"SOMSC\",\"SOMAE\"],\"men\":[\"SOMSC\", \"SOMAE\"]}";
        
        EventEntity eventEntity = DpwRepositoryTestHelper.createEventEntity();
        eventEntity.setEventType("Claim"); // Set non-empty event type
        eventEntity.setPgpeCode("ELCU");
        eventEntity.setEventVariationName(Collections.singletonList("EV"));
        eventEntity.setProcessingEntityName("france"); // Add this field
        
        RequestEntity requestEntity = DpwRepositoryTestHelper.createRequestEntity(1);
        List<RequestEntity> requestEntityList = new ArrayList<>();
        requestEntityList.add(requestEntity);
        
        EventWorkflow ewBody = new EventWorkflow();
        ewBody.setNextAction("tbScrutiny");
        
        WorkflowStepStatus workflowStepStatus = new WorkflowStepStatus();
        workflowStepStatus.setStatus("Completed");
        workflowStepStatus.setStep(Arrays.asList("Initiate", "Inputer"));
        ewBody.setWorkflowStepStatus(workflowStepStatus);
        
        FlagFieldDetails flagFieldDetails = new FlagFieldDetails();
        flagFieldDetails.setThresholdFlag(true);
        
        TransactionProperty transactionPropertyObject = new TransactionProperty();
        List<TransactionProperties> transactionPropertiesList = new ArrayList<>();
        TransactionProperties transactionProperties = new TransactionProperties();
        transactionProperties.setPropertyName("TPN");
        transactionPropertiesList.add(transactionProperties);
        transactionPropertyObject.setTransactionProperties(transactionPropertiesList);
        
        // Mock the API calls
        when(eventWorkflowApi.updateEventWorkflow(
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any()
        )).thenReturn(ewBody);
        
        when(requestRepository.findByEventId(ArgumentMatchers.any()))
            .thenReturn(requestEntityList);
        
        // Act
        RequestEvent event = DpwDTOConverter.convert(eventEntity, RequestEvent.class);
        
        assertDoesNotThrow(() -> {
            dpwEventHelper.updateWorkflowAndEventEntity(
                event, 
                "bnppuide1", 
                "submitForValidation", 
                eventEntity, 
                "30084", 
                "tbScrutiny", 
                flagFieldDetails, 
                LocalDateTime.now(), 
                transactionPropertyObject
            );
        });
    }

    @Test
    void updateWorkflowAndEventEntityCheckThreshold() {
        // Arrange
        EventEntity eventEntity = DpwRepositoryTestHelper.createEventEntity();
        eventEntity.setEventType("Claim");
        eventEntity.setPgpeCode("ILCA");
        eventEntity.setEventVariationName(Collections.singletonList("EV"));
        eventEntity.setCurrencyRate(new BigDecimal(1));
        eventEntity.setAmount(new BigDecimal(1));
        
        RequestEntity requestEntity = DpwRepositoryTestHelper.createRequestEntity(1);
        List<RequestEntity> requestEntityList = new ArrayList<>();
        requestEntityList.add(requestEntity);
        
        EventWorkflow ewBody = new EventWorkflow();
        ewBody.setNextAction("tbCompliance");
        
        WorkflowStepStatus workflowStepStatus = new WorkflowStepStatus();
        workflowStepStatus.setStatus("Completed");
        workflowStepStatus.setStep(Arrays.asList("Initiate", "Inputer"));
        ewBody.setWorkflowStepStatus(workflowStepStatus);
        
        FlagFieldDetails flagFieldDetails = new FlagFieldDetails();
        flagFieldDetails.setThresholdFlag(true);
        
        TransactionProperty transactionPropertyObject = new TransactionProperty();
        List<TransactionProperties> transactionPropertiesList = new ArrayList<>();
        TransactionProperties transactionProperties = new TransactionProperties();
        transactionProperties.setPropertyName("TPN");
        transactionPropertiesList.add(transactionProperties);
        transactionPropertyObject.setTransactionProperties(transactionPropertiesList);
        
        // Mock the API calls
        when(eventWorkflowApi.updateEventWorkflow(
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any()
        )).thenReturn(ewBody);
        
        when(requestRepository.findByEventId(ArgumentMatchers.any()))
            .thenReturn(requestEntityList);
        
        // Act & Assert
        RequestEvent event = DpwDTOConverter.convert(eventEntity, RequestEvent.class);
        
        assertDoesNotThrow(() -> {
            dpwEventHelper.updateWorkflowAndEventEntity(
                event, 
                "e12928", 
                "submitForValidation", 
                eventEntity, 
                "30004", 
                "Pending UV Document", 
                flagFieldDetails, 
                LocalDateTime.now(), 
                transactionPropertyObject
            );
        });
    }

    @Test
    void updateWorkflowAndEventEntityCheckThresholdBranchCode() {
        // Arrange
        EventEntity eventEntity = DpwRepositoryTestHelper.createEventEntity();
        eventEntity.setEventType("Claim");
        eventEntity.setPgpeCode("ILCA");
        eventEntity.setEventVariationName(Collections.singletonList("EV"));
        eventEntity.setCurrencyRate(new BigDecimal(1));
        eventEntity.setAmount(new BigDecimal(1));
        
        RequestEntity requestEntity = DpwRepositoryTestHelper.createRequestEntity(1);
        List<RequestEntity> requestEntityList = new ArrayList<>();
        requestEntityList.add(requestEntity);
        
        EventWorkflow ewBody = new EventWorkflow();
        ewBody.setNextAction("tbCompliance");
        
        WorkflowStepStatus workflowStepStatus = new WorkflowStepStatus();
        workflowStepStatus.setStatus("Completed");
        workflowStepStatus.setStep(Arrays.asList("Initiate", "Inputer"));
        ewBody.setWorkflowStepStatus(workflowStepStatus);
        
        FlagFieldDetails flagFieldDetails = new FlagFieldDetails();
        flagFieldDetails.setThresholdFlag(true);
        
        TransactionProperty transactionPropertyObject = new TransactionProperty();
        List<TransactionProperties> transactionPropertiesList = new ArrayList<>();
        TransactionProperties transactionProperties = new TransactionProperties();
        transactionProperties.setPropertyName("TPN");
        transactionPropertiesList.add(transactionProperties);
        transactionPropertyObject.setTransactionProperties(transactionPropertiesList);
        
        // Mock the API calls
        when(eventWorkflowApi.updateEventWorkflow(
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any()
        )).thenReturn(ewBody);
        
        when(requestRepository.findByEventId(ArgumentMatchers.any()))
            .thenReturn(requestEntityList);
        
        // Act & Assert
        RequestEvent event = DpwDTOConverter.convert(eventEntity, RequestEvent.class);
        
        assertDoesNotThrow(() -> {
            dpwEventHelper.updateWorkflowAndEventEntity(
                event, 
                "e12928", 
                "submitForValidation", 
                eventEntity, 
                "30004", 
                "Pending UV Document", 
                flagFieldDetails, 
                LocalDateTime.now(), 
                transactionPropertyObject
            );
        });
    }

    @Test
    void updateWorkflowAndEventEntityClaim() {
        // Arrange
        EventEntity eventEntity = DpwRepositoryTestHelper.createEventEntity();
        eventEntity.setEventType("Claim");
        eventEntity.setPgpeCode("ILCA");
        eventEntity.setEventVariationName(Collections.singletonList("EV"));
        
        RequestEntity requestEntity = DpwRepositoryTestHelper.createRequestEntity(1);
        List<RequestEntity> requestEntityList = new ArrayList<>();
        requestEntityList.add(requestEntity);
        
        EventWorkflow ewBody = new EventWorkflow();
        ewBody.setNextAction("tbCompliance");
        
        WorkflowStepStatus workflowStepStatus = new WorkflowStepStatus();
        workflowStepStatus.setStatus("Completed");
        workflowStepStatus.setStep(Arrays.asList("Initiate", "Inputer"));
        ewBody.setWorkflowStepStatus(workflowStepStatus);
        
        TransactionProperty transactionPropertyObject = new TransactionProperty();
        List<TransactionProperties> transactionPropertiesList = new ArrayList<>();
        TransactionProperties transactionProperties = new TransactionProperties();
        transactionProperties.setPropertyName("TPN");
        transactionPropertiesList.add(transactionProperties);
        transactionPropertyObject.setTransactionProperties(transactionPropertiesList);
        
        // Mock the API calls
        when(eventWorkflowApi.updateEventWorkflow(
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any()
        )).thenReturn(ewBody);
        
        when(requestRepository.findByEventId(ArgumentMatchers.any()))
            .thenReturn(requestEntityList);
        
        // Act & Assert
        RequestEvent event = DpwDTOConverter.convert(eventEntity, RequestEvent.class);
        
        assertDoesNotThrow(() -> {
            dpwEventHelper.updateWorkflowAndEventEntity(
                event, 
                "e12928", 
                "submitForValidation", 
                eventEntity, 
                "30084", 
                "Pending UV Document", 
                new FlagFieldDetails(), 
                LocalDateTime.now(), 
                transactionPropertyObject
            );
        });
    }

    @Test
    void updateWorkflowAndEventEntityEventTypeBlank() {
        // Arrange
        EventEntity eventEntity = DpwRepositoryTestHelper.createEventEntity();
        eventEntity.setEventType(""); // Blank event type
        eventEntity.setPgpeCode("ILCA");
        eventEntity.setEventVariationName(Collections.singletonList("EV"));
        
        RequestEntity requestEntity = DpwRepositoryTestHelper.createRequestEntity(1);
        List<RequestEntity> requestEntityList = new ArrayList<>();
        requestEntityList.add(requestEntity);
        
        EventWorkflow ewBody = new EventWorkflow();
        ewBody.setNextAction("tbCompliance");
        
        WorkflowStepStatus workflowStepStatus = new WorkflowStepStatus();
        workflowStepStatus.setStatus("Completed");
        workflowStepStatus.setStep(Arrays.asList("Initiate", "Inputer"));
        ewBody.setWorkflowStepStatus(workflowStepStatus);
        
        TransactionProperty transactionPropertyObject = new TransactionProperty();
        List<TransactionProperties> transactionPropertiesList = new ArrayList<>();
        TransactionProperties transactionProperties = new TransactionProperties();
        transactionProperties.setPropertyName("TPN");
        transactionPropertiesList.add(transactionProperties);
        transactionPropertyObject.setTransactionProperties(transactionPropertiesList);
        
        // Mock the API calls
        when(eventWorkflowApi.updateEventWorkflow(
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any()
        )).thenReturn(ewBody);
        
        when(requestRepository.findByEventId(ArgumentMatchers.any()))
            .thenReturn(requestEntityList);
        
        // Act
        RequestEvent event = DpwDTOConverter.convert(eventEntity, RequestEvent.class);
        
        assertDoesNotThrow(() -> {
            dpwEventHelper.updateWorkflowAndEventEntity(
                event, 
                "e12928", 
                "submitForValidation", 
                eventEntity, 
                "30004", 
                "Pending UV Document", 
                new FlagFieldDetails(), 
                LocalDateTime.now(), 
                transactionPropertyObject
            );
        });
        
        // Assert
        assertEquals("", eventEntity.getEventType());
    }

    @Test
    void updateWorkflowAndEventEntityEventTypeNull() {
        // Arrange
        EventEntity eventEntity = DpwRepositoryTestHelper.createEventEntity();
        eventEntity.setEventType(null); // Null event type
        eventEntity.setPgpeCode("ILCA");
        eventEntity.setEventVariationName(Collections.singletonList("EV"));
        
        RequestEntity requestEntity = DpwRepositoryTestHelper.createRequestEntity(1);
        List<RequestEntity> requestEntityList = new ArrayList<>();
        requestEntityList.add(requestEntity);
        
        EventWorkflow ewBody = new EventWorkflow();
        ewBody.setNextAction("tbCompliance");
        
        WorkflowStepStatus workflowStepStatus = new WorkflowStepStatus();
        workflowStepStatus.setStatus("Completed");
        workflowStepStatus.setStep(Arrays.asList("Initiate", "Inputer"));
        ewBody.setWorkflowStepStatus(workflowStepStatus);
        
        TransactionProperty transactionPropertyObject = new TransactionProperty();
        List<TransactionProperties> transactionPropertiesList = new ArrayList<>();
        TransactionProperties transactionProperties = new TransactionProperties();
        transactionProperties.setPropertyName("TPN");
        transactionPropertiesList.add(transactionProperties);
        transactionPropertyObject.setTransactionProperties(transactionPropertiesList);
        
        // Mock the API calls
        when(eventWorkflowApi.updateEventWorkflow(
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any()
        )).thenReturn(ewBody);
        
        when(requestRepository.findByEventId(ArgumentMatchers.any()))
            .thenReturn(requestEntityList);
        
        // Act
        RequestEvent event = DpwDTOConverter.convert(eventEntity, RequestEvent.class);
        
        assertDoesNotThrow(() -> {
            dpwEventHelper.updateWorkflowAndEventEntity(
                event, 
                "e12928", 
                "submitForValidation", 
                eventEntity, 
                "30004", 
                "Pending UV Document", 
                new FlagFieldDetails(), 
                LocalDateTime.now(), 
                transactionPropertyObject
            );
        });
        
        // Assert
        assertNull(eventEntity.getEventType());
    }

    @Test
    void updateWorkflowAndEventEntitySetEventWorkflowData() {
        // Arrange
        EventEntity eventEntity = DpwRepositoryTestHelper.createEventEntity();
        eventEntity.setEventSteps(null);
        eventEntity.setEventType("Claim"); // Set a valid event type
        
        RequestEntity requestEntity = DpwRepositoryTestHelper.createRequestEntity(1);
        List<RequestEntity> requestEntityList = new ArrayList<>();
        requestEntityList.add(requestEntity);
        
        EventWorkflow ewBody = new EventWorkflow();
        ewBody.setNextAction("autoValidate");
        
        WorkflowStepStatus workflowStepStatus = new WorkflowStepStatus();
        workflowStepStatus.setStatus("Completed");
        workflowStepStatus.setStep(Arrays.asList("Initiate", "Inputer"));
        ewBody.setWorkflowStepStatus(workflowStepStatus);
        
        TransactionProperty transactionProperty = new TransactionProperty();
        transactionProperty.addTransactionPropertiesItem(new TransactionProperties());
        
        // Mock the API calls
        when(eventWorkflowApi.updateEventWorkflow(
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any()
        )).thenReturn(ewBody);
        
        when(requestRepository.findByEventId(ArgumentMatchers.any()))
            .thenReturn(requestEntityList);
        
        // Act & Assert
        assertDoesNotThrow(() -> {
            dpwEventHelper.updateWorkflowAndEventEntity(
                new RequestEvent(), 
                "e12928", 
                "submitForValidation", 
                eventEntity, 
                "30004", 
                "autoValidate", 
                new FlagFieldDetails(), 
                LocalDateTime.now(), 
                transactionProperty
            );
        });
    }

    @Test
    void updateWorkflowAndEventEntityThresholdFlagTrue() {
        // Arrange
        EventEntity eventEntity = DpwRepositoryTestHelper.createEventEntity();
        eventEntity.setEventType("Claim");
        eventEntity.setPgpeCode("ILCA");
        eventEntity.setEventVariationName(Collections.singletonList("EV"));
        
        RequestEntity requestEntity = DpwRepositoryTestHelper.createRequestEntity(1);
        List<RequestEntity> requestEntityList = new ArrayList<>();
        requestEntityList.add(requestEntity);
        
        EventWorkflow ewBody = new EventWorkflow();
        ewBody.setNextAction("tbCompliance");
        
        WorkflowStepStatus workflowStepStatus = new WorkflowStepStatus();
        workflowStepStatus.setStatus("Completed");
        workflowStepStatus.setStep(Arrays.asList("Initiate", "Inputer"));
        ewBody.setWorkflowStepStatus(workflowStepStatus);
        
        FlagFieldDetails flagFieldDetails = new FlagFieldDetails();
        flagFieldDetails.setThresholdFlag(true);
        
        TransactionProperty transactionPropertyObject = new TransactionProperty();
        List<TransactionProperties> transactionPropertiesList = new ArrayList<>();
        TransactionProperties transactionProperties = new TransactionProperties();
        transactionProperties.setPropertyName("TPN");
        transactionPropertiesList.add(transactionProperties);
        transactionPropertyObject.setTransactionProperties(transactionPropertiesList);
        
        // Mock the API calls
        when(eventWorkflowApi.updateEventWorkflow(
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any(), 
            ArgumentMatchers.any()
        )).thenReturn(ewBody);
        
        when(requestRepository.findByEventId(ArgumentMatchers.any()))
            .thenReturn(requestEntityList);
        
        // Act & Assert
        RequestEvent event = DpwDTOConverter.convert(eventEntity, RequestEvent.class);
        
        assertDoesNotThrow(() -> {
            dpwEventHelper.updateWorkflowAndEventEntity(
                event, 
                "e1292
